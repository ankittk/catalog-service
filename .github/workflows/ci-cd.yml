name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  DOCKER_IMAGE_NAME: catalog-service

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run golangci-lint
        run: golangci-lint run

      - name: Check code formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -s -w .'"
            exit 1
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

  # Build and test Docker image
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate protobuf files
        run: make generate

      - name: Build Docker image
        run: make docker-build

      - name: Start services with Docker Compose
        run: |
          docker compose up -d
          sleep 10

      - name: Test health endpoint
        run: |
          # Wait for service to be ready
          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          
          # Test health endpoint
          curl -s http://localhost:8000/health | jq -e '.status == "healthy"'

      - name: Test API with authentication
        run: |
          # Test API endpoints
          make test-api

      - name: Stop services
        if: always()
        run: docker compose down